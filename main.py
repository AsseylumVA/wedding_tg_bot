import logging
from logging.handlers import TimedRotatingFileHandler

from aiogram import Bot, Router, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

import settings

bot = Bot(
    token=settings.API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
router = Router()

log_format = '[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s'

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format=log_format,
    handlers=[TimedRotatingFileHandler(settings.LOG_FILE, when='d')],
)


# @start_router.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä CommandStart()')

# @start_router.message(Command('start_2'))
# async def cmd_start_2(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()')

# @start_router.message(F.text == '/start_3')
# async def cmd_start_3(message: Message):
#     await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!')


# –°–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤
questions = {
    1: {
        'id': 1,
        'text': '–ü–ª–∞–Ω–∏—Ä—É–µ—à—å –ª–∏ —Ç—ã –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à—É —Å–≤–∞–¥—å–±—É?',
        'answers': [
            {'text': 'üéâ–î–∞', 'value': True},
            {'text': 'üòï–ù–µ—Ç', 'value': False},
        ],
        'adjust': 2,
    },
    2: {
        'text': '–ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä?',
        'answers': [
            {'text': 'üöå–î–∞', 'value': True},
            {'text': 'üöï–ù–µ—Ç, –ø—Ä–∏–µ–¥—É —Å–∞–º(–∞)', 'value': False},
        ],
        'adjust': 2,
    },
    3: {
        'text': '–ö–∞–∫–æ–π –∞–ª–∫–æ–≥–æ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?',
        'answers': [
            {'text': 'üç∏–ö—Ä–µ–ø–∫–∏–π', 'value': 'hard'},
            {'text': 'üç∑–í–∏–Ω–æ', 'value': 'wine'},
            {'text': 'üç∫–¢—ë–º–Ω–æ–µ –ø–∏–≤–æ', 'value': 'light_beer'},
            {'text': 'üçª–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ', 'value': 'dark_beer'},
        ],
        'adjust': 2,
    },
}


class UserState(StatesGroup):
    NEW_USER = State()
    REGISTERED = State()
    FRAUD = State()
    LAST_STEP = State()


def start_menu():
    kb_list = [[types.KeyboardButton(text='/start')]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True)
    return keyboard


def new_user_menu():
    kb_list = [
        [
            types.KeyboardButton(
                text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä',
                request_contact=True,
                callback_data='contact',
            )
        ]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True
    )


def make_menu():
    kb_list = [
        [types.KeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'), types.KeyboardButton(text='–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è')],
        [types.KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')],
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True)


def create_qst_inline_kb(
    question_id: int, question: dict
) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    for answer in question['answers']:
        builder.row(
            types.InlineKeyboardButton(
                text=answer['text'],
                callback_data=f'qst_{question_id}_{answer["value"]}',
            )
        )
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.adjust(question['adjust'])
    return builder.as_markup()


@router.message(StateFilter(None), CommandStart())
async def start_new_user(message: Message, state: FSMContext):
    """
    This handler will be called when user sends `/start` or `/help` command
    """

    await message.answer(
        '–ú—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è', reply_markup=new_user_menu()
    )
    return


@router.message(F.contact)
async def register(message: types.Message, state: FSMContext):
    await state.clear()

    if message.contact.user_id != message.from_user.id:
        await message.answer('–ù–µ –ø—ã—Ç–∞–π—Å—è –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å')
        return

    phone_number = message.contact.phone_number
    if not phone_number.startswith('+'):
        phone_number = f'+{phone_number}'

    user_data = settings.DB.get(phone_number)
    if not user_data:
        data = await state.get_data()
        data['fraud'] = data.setdefault('fraud', 0) + 1
        await state.update_data(data)
        await message.answer(
            '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é. –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —ç—Ç–æ –æ—à–∏–±–∫–æ–π, '
            '–æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )
        return

    await state.update_data(user_data)
    await state.set_state(UserState.REGISTERED)
    question_id = 1
    question = questions[question_id]
    await message.answer(
        text=question['text'],
        reply_markup=create_qst_inline_kb(question_id, question),
    )

@router.callback_query(StateFilter(UserState.REGISTERED), F.data.startswith('qst_'))
async def handle_q_answers(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    _, question_id, answer_value = callback.data.split('_')
    question_id = int(question_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    question = questions.get(question_id)
    if not question:
        await callback.answer('–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    await process_answer(state, answer_value, question_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    next_question_id = question_id + 1
    if next_question_id in questions:
        next_question = questions[next_question_id]
        await callback.message.answer(
            text=next_question['text'],
            reply_markup=create_qst_inline_kb(next_question_id, next_question),
        )
    else:
        state.set_state(UserState.LAST_STEP)
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! üéâ', reply_markup=make_menu())


async def process_answer(
    state: FSMContext,
    answer_value: str,
    question_id: int,
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({question_id: answer_value})
